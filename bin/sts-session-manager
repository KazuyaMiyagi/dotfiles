#! /usr/bin/env bash

set -eu
set -o pipefail

function __is_installed() {
    type "${1}" &>/dev/null
}

function __validate() {
    check-required-tools >/dev/null

    if [ -z "${AWS_PROFILE:=""}" ]; then
        echo "Error: AWS_PROFILE is not export" >&2
        exit 1
    fi

    if [ "${SUBCOMMAND}" == "get-session-token" ]; then
        if [ -z "${BASE_AWS_PROFILE}" ]; then
            echo "Error: The second argument is required for the subcommand get-session-token" >&2
            exit 1
        fi

        if [ -z "${MFA_TOKEN}" ]; then
            echo "Error: The third argument is required for the subcommand get-session-token" >&2
            exit 1
        fi

        if ! echo "${MFA_TOKEN}" | grep -q -E "\d{6}"; then
            echo "Error: mfa_token must be a 6 digit number" >&2
            exit 1
        fi
    fi

    if [ "${SUBCOMMAND}" == "assume-role" ]; then
        if [ -z "${BASE_AWS_PROFILE}" ]; then
            echo "Error: The second argument is required for the subcommand assume-role" >&2
            exit 1
        fi
    fi
}

function check-required-tools() {
    echo "==> Start checking required tools..."
    local REQUIRED_TOOLS=(aws jq)

    if [ "$(uname)" == "Darwin" ]; then
        REQUIRED_TOOLS+=(gdate)
    fi

    # shellcheck disable=SC2068
    for tool in ${REQUIRED_TOOLS[@]}; do
        if ! __is_installed "${tool}"; then
            echo "[Error] ${tool} not installed. Please install the ${tool}." >&2
            exit 1
        else
            echo "[Success] ${tool} was already installed."
        fi
    done
    echo -e "<== End checking required tools.\n"
}

function assume-role() {
    __validate

    local CACHE_FILE
    CACHE_FILE="${CACHE_DIR}/assume-role-$(echo -n "${AWS_PROFILE}" | openssl sha1 | sed "s/^SHA1(stdin)=\ //").json"

    local SESSION_NAME
    SESSION_NAME="${SESSION_NAME:=$(whoami)}"

    local DURATION_SECONDS
    DURATION_SECONDS="${DURATION_SECONDS:=$((60 * 60))}"

    local STS_ASSUME_ROLE_COMMAND
    STS_ASSUME_ROLE_COMMAND="aws --profile $(aws --profile "${BASE_AWS_PROFILE}" configure get source_profile) sts assume-role --role-arn $(aws --profile "${BASE_AWS_PROFILE}" configure get role_arn) --role-session-name ${SESSION_NAME} --duration-seconds ${DURATION_SECONDS}"

    if [ ! -s "${CACHE_FILE}" ]; then
        echo "Create new AWS STS session token..." >&2
        export AWS_PROFILE="${BASE_AWS_PROFILE}"
        ${STS_ASSUME_ROLE_COMMAND} >"${CACHE_FILE}"
    fi

    if [ "$(uname)" == "Darwin" ]; then
        local DATE_CMD="gdate"
    else
        local DATE_CMD="date"
    fi

    local EXPIRATION
    EXPIRATION=$(jq --raw-output --monochrome-output ".Credentials.Expiration" <"${CACHE_FILE}")

    local EXPIRATION_UNIXTIME
    EXPIRATION_UNIXTIME=$("${DATE_CMD}" -d "${EXPIRATION}" "+%s")

    local NOW_UNIXTIME
    NOW_UNIXTIME=$("${DATE_CMD}" "+%s")

    if [ "${EXPIRATION_UNIXTIME}" -lt "${NOW_UNIXTIME}" ]; then
        echo "AWS STS session token is expired." >&2
        echo "Recreate AWS STS session token..." >&2
        export AWS_PROFILE="${BASE_AWS_PROFILE}"
        ${STS_ASSUME_ROLE_COMMAND} >"${CACHE_FILE}"
    fi

    jq --raw-output --monochrome-output '{Version: 1} + .Credentials' <"${CACHE_FILE}"
}

function get-session-token() {
    __validate

    local CACHE_FILE
    CACHE_FILE="${CACHE_DIR}/get-session-token-$(echo -n "${AWS_PROFILE}" | openssl sha1 | sed "s/^SHA1(stdin)=\ //").json"

    local SESSION_NAME
    SESSION_NAME="${SESSION_NAME:=$(whoami)}"

    local DURATION_SECONDS
    DURATION_SECONDS="${DURATION_SECONDS:=$((60 * 60))}"

    local STS_GET_SESSION_TOKEN_COMMAND
    STS_GET_SESSION_TOKEN_COMMAND="aws --profile ${BASE_AWS_PROFILE} sts get-session-token --serial-number $(aws configure get mfa_serial) --token-code ${MFA_TOKEN} --duration-seconds ${DURATION_SECONDS}"

    if [ ! -s "${CACHE_FILE}" ]; then
        echo "Create new AWS STS session token..." >&2
        ${STS_GET_SESSION_TOKEN_COMMAND} >"${CACHE_FILE}"
    fi

    if [ "$(uname)" == "Darwin" ]; then
        local DATE_CMD="gdate"
    else
        local DATE_CMD="date"
    fi

    local EXPIRATION
    EXPIRATION=$(jq --raw-output --monochrome-output ".Credentials.Expiration" <"${CACHE_FILE}")

    local EXPIRATION_UNIXTIME
    EXPIRATION_UNIXTIME=$("${DATE_CMD}" -d "${EXPIRATION}" "+%s")

    local NOW_UNIXTIME
    NOW_UNIXTIME=$("${DATE_CMD}" "+%s")

    if [ "${EXPIRATION_UNIXTIME}" -lt "${NOW_UNIXTIME}" ]; then
        echo "AWS STS session token is expired." >&2
        echo "Recreate AWS STS session token..." >&2
        ${STS_GET_SESSION_TOKEN_COMMAND} >"${CACHE_FILE}"
    fi

    jq --raw-output --monochrome-output '{Version: 1} + .Credentials' <"${CACHE_FILE}"
}

function list() {
    ls -1 "${CACHE_DIR}"
}

function show() {
    __validate

    local CACHE_FILE
    CACHE_FILE="${CACHE_DIR}/$(echo -n "${AWS_PROFILE}" | openssl sha1 | sed "s/^SHA1(stdin)=\ //").json"
    if [ -s "${CACHE_FILE}" ]; then
        jq "." <"${CACHE_FILE}"
    else
        echo "Session cache not found." >&2
        exit 1
    fi
}

function remove() {
    __validate

    local CACHE_FILE
    CACHE_FILE="${CACHE_DIR}/$(echo -n "${AWS_PROFILE}" | openssl sha1 | sed "s/^SHA1(stdin)=\ //").json"
    if [ -s "${CACHE_FILE}" ]; then
        rm -i "${CACHE_FILE}"
    else
        echo "Session cache not found." >&2
        exit 1
    fi
}

function usage() {
    COMMAND="sts_session_manager"
    readonly COMMAND
    cat <<-HEREDOC
		Usage: ${COMMAND} <subcommand>
		Subcommands:
		    ${COMMAND} check-required-tools | check                     -- Check required tools
		    ${COMMAND} get-session-token <base_aws_profile> <mfa_token> -- Outputs AWS session token in external process format
		    ${COMMAND} assume-role                                      -- Outputs AWS assume-role token in external process format
		    ${COMMAND} list | ls                                        -- List sts cache file
		    ${COMMAND} show                                             -- Show sts cache file detail
		    ${COMMAND} remove | rm                                      -- Remove sts cache file
	HEREDOC
    exit 1
}

SUBCOMMAND="${1:-""}"
readonly SUBCOMMAND

BASE_AWS_PROFILE="${2:-""}"
readonly BASE_AWS_PROFILE

MFA_TOKEN="${3:-""}"
readonly MFA_TOKEN

CACHE_DIR="${HOME}/.aws/cli/cache"
readonly CACHE_DIR

case "${SUBCOMMAND}" in
check-required-tools | check)
    check-required-tools
    ;;
assume-role)
    assume-role
    ;;
get-session-token)
    get-session-token
    ;;
list | ls)
    list
    ;;
show)
    show
    ;;
remove | rm)
    remove
    ;;
*)
    usage
    ;;
esac

