#! /usr/bin/env bash

set -eu
set -o pipefail

cd "$(dirname "${0}")/.."

# __is_installed checks if the specified command is installed
function __is_installed() {
    type "${1}" &>/dev/null
}

function homebrew_install() {
    if ! __is_installed brew; then
        echo "==> Installing Homebrew."
        /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"
    else
        echo "==> Homebrew was already installed."
    fi
}

function homebrew_bundle_install() {
    brew bundle check >/dev/null 2>&1 || {
        echo "==> Installing Homebrew dependenciesâ€¦"
        brew bundle install
    }
}

function homebrew_update() {
    echo "==> Updating Homebrew packages..."
    brew update
    brew upgrade
    brew cleanup
    echo "==> Finished updating Homebrew packages."

    echo "==> Updating Homebrew cask packages..."
    brew upgrade --cask
    echo "==> Finished updating Homebrew cask packages."

    brew doctor || true
    brew bundle dump --file=- | sort --uniq >Brewfile
}

function vim_plug_install() {
    if [ -f "${XDG_DATA_HOME}/vim/autoload/plug.vim" ]; then
        echo "==> vim-plug was already installed."
    else
        echo "==> Installing vim-plug"
        curl --fail --location --create-dirs --output "${XDG_DATA_HOME}/vim/autoload/plug.vim" \
            https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    fi
}

function vim_plug_package_install() {
    echo "==> Installing vim-plug packages."
    git config --global --rename-section url.git@github.com: temp
    vim +PlugUpgrade +PlugUpdate +qa
    git config --global --rename-section temp url.git@github.com:
}

function asdf_plugins_install() {
    echo "==> Installing asdf plugins..."
    for plugin in $(cut -d ' ' -f1 ./asdf/tool-versions | tr '\n' ' '); do
        asdf plugin add "${plugin}"
    done
    echo "==> Finished installing asdf plugins."
}

function asdf_plugins_update() {
    echo "==> Updating asdf plugins..."
    asdf plugin update --all
    echo "==> Finished updating asdf plugins."
}

function asdf_plugins_python_apply_path() {
    echo "==> Applying asdf Python plugin patch..."
    pushd "${XDG_DATA_HOME}/asdf/plugins/python/" >/dev/null
    git reset --hard HEAD >/dev/null
    cat <<-'HEREDOC' | git apply
	diff --git a/bin/list-all b/bin/list-all
	index c0ecb83..e934faa 100755
	--- a/bin/list-all
	+++ b/bin/list-all
	@@ -4,7 +4,7 @@ source "$(dirname "$0")/utils.sh"
	
	 list_all() {
	   install_or_update_python_build
	-  $(python_build_path) --definitions | tr '\n' ' '
	+  $(python_build_path) --definitions | grep -E -v -e '^.*t$' | tr '\n' ' '
	 }
	
	 list_all
	HEREDOC
    popd >/dev/null
    echo "==> Finished applying asdf Python plugin patch."
}

function asdf_managed_tools_update() {
    echo "==> Updating asdf managed tools versions..."
    pushd asdf >/dev/null
    for plugin in $(cut -d ' ' -f1 ./tool-versions | tr '\n' ' '); do
        asdf install "${plugin}" latest
        asdf set "${plugin}" latest
    done
    popd >/dev/null
    echo "==> Finished updating asdf managed tools versions."
}

function tflint_init() {
    echo "==> Starting TFLint initialization..."
    tflint --init
    echo "==> TFLint initialization completed."
}

function gcloud_update() {
    echo "==> Updating gcloud components..."
    gcloud components update --quiet
    echo "==> Finished updating gcloud components."
}

echo "Starting bootstrap..."

homebrew_install
homebrew_bundle_install
homebrew_update
vim_plug_install
vim_plug_package_install
asdf_plugins_install
asdf_plugins_update
asdf_plugins_python_apply_path
asdf_managed_tools_update
tflint_init
gcloud_update

echo "Bootstrap finished!"

