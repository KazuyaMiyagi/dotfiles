#/bin/sh

# script/bootstrap: Resolve all dependencies that the application requires to
#                   run.

set -e

cd "$(dirname "$0")/.."

readonly DOTFILE_ROOT_DIR="$(pwd)"

# __is_installed checks install status the specified command
function __is_installed() {
  type $1 &> /dev/null
}

homebrew_install() {
    if ! __is_installed brew ; then
        echo "==> Installing Homebrew."
        /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"
    else
        echo "==> Homebrew was already installed."
    fi
}

homebrew_bundle_install() {
    brew bundle check >/dev/null 2>&1  || {
        echo "==> Installing Homebrew dependenciesâ€¦"
        brew bundle install --no-lock
    }
}

homebrew_update() {
    echo "==> Update Homebrew packages."
    brew update
    brew upgrade
    brew cleanup
    echo "==> Finished Update Homebrew packages."

    echo "==> Update Homebrew cask packages."
    brew upgrade --cask
    echo "==> Finished Update Homebrew cask packages."

    brew doctor || true
    brew bundle dump --force
}

vim_plug_install() {
    if [ -f ${XDG_DATA_HOME}/vim/autoload/plug.vim ]; then
        echo "==> vim-plug was already installed."
    else
        echo "==> Installing vim-plug"
        curl --fail --location --create-dirs --output ${XDG_DATA_HOME}/vim/autoload/plug.vim \
            https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    fi
}

vim_plug_package_install() {
    echo "==> Installing vim-plug packages."
    git config --global --rename-section url.git@github.com: temp
    vim +PlugUpgrade +PlugUpdate +qa
    git config --global --rename-section temp url.git@github.com:
}

asdf_plugins_install() {
    echo "==> Installing asdf plugins..."
    for plugin in $(cut -d ' ' -f1 ./asdf/tool-versions); do
        asdf plugin add ${plugin} || true
    done
    asdf install
    echo "==> Finished install asdf plugins."
}

asdf_plugins_update() {
    echo "==> Updating asdf plugins..."
    asdf plugin update --all
    echo "==> Finished update asdf plugins."
}

asdf_managed_tools_update() {
    echo "==> Updating asdf managed tools version..."
    for plugin in $(cut -d ' ' -f1 ./asdf/tool-versions | grep -v ruby); do
        asdf install ${plugin} latest
        asdf global ${plugin} latest
    done
    echo "==> Finished update asdf managed tools version."
}

echo "Start bootstrap"

homebrew_install
homebrew_bundle_install
homebrew_update
vim_plug_install
vim_plug_package_install
asdf_plugins_install
asdf_plugins_update
asdf_managed_tools_update

echo "Finish bootstrap!"
