set encoding=utf-8
scriptencoding utf-8

set runtimepath+=$XDG_DATA_HOME/vim

call plug#begin($XDG_DATA_HOME . '/vim/plugged')

Plug 'itchyny/lightline.vim'
set laststatus=2
set noshowmode
set t_Co=256
let g:lightline = {
            \ 'colorscheme': 'gruvbox'
            \ }
Plug 'editorconfig/editorconfig-vim'
Plug 'luochen1990/rainbow'
let g:rainbow_active = 1 "0 if you want to enable it later via :RainbowToggle
Plug 'mattn/vim-maketable'
Plug 'mhinz/vim-signify'
Plug 'kannokanno/previm'
let g:previm_plantuml_imageprefix = 'http://localhost:8888/img/'
Plug 'vim-jp/vimdoc-ja'
Plug 'taichouchou2/vim-endwise'
Plug 'osyo-manga/vim-over'
Plug 'tyru/open-browser.vim'
Plug 'bronson/vim-trailing-whitespace'
Plug 'google/vim-jsonnet'
Plug 'hashivim/vim-terraform'
let g:terraform_align=1
let g:terraform_fold_sections=0
let g:terraform_fmt_on_save=1
Plug 'github/copilot.vim'

" colorscheme
Plug 'morhetz/gruvbox'

" Language server
Plug 'prabirshrestha/vim-lsp'
let g:lsp_preview_float = 1
let g:lsp_diagnostics_float_cursor = 1
let g:lsp_diagnostics_virtual_text_enabled = 0
let g:lsp_document_code_action_signs_hint = {'text': '󰯬'}
let g:lsp_diagnostics_signs_information = {'text': '󰰄'}
let g:lsp_diagnostics_signs_hint = {'text': '󰰁'}
let g:lsp_diagnostics_signs_warning = {'text': '󰰮'}
let g:lsp_diagnostics_signs_error = {'text': '󰯸'}

augroup vimrc
    autocmd! BufWritePre * call execute('LspDocumentFormatSync')
augroup END

Plug 'prabirshrestha/asyncomplete.vim'
Plug 'prabirshrestha/asyncomplete-lsp.vim'
Plug 'mattn/vim-lsp-settings'
let g:lsp_settings_filetype_ruby = ['rubocop-lsp-mode', 'ruby-lsp']
let g:lsp_settings_filetype_json = ['json-languageserver']
let g:lsp_settings = {
            \  'pylsp-all': {
            \    'cmd': {server_info->['pylsp']},
            \    'workspace_config': {
            \      'pylsp': {
            \        'configurationSources': ['flake8'],
            \        'plugins': {
            \          'flake8': {'enabled': v:true}
            \        }
            \      }
            \    }
            \  },
            \  'typescript-language-server': {
            \    'workspace_config': {
            \      'typescript': {
            \        'format': {
            \          'indentSize': 2,
            \          'semicolons': 'insert'
            \        },
            \      },
            \      'javascript': {
            \        'format': {
            \          'indentSize': 2,
            \          'semicolons': 'insert'
            \        },
            \      }
            \    }
            \  },
            \  'efm-langserver': {
            \    'disabled': v:false
            \  },
            \}
Plug 'hrsh7th/vim-vsnip'
Plug 'hrsh7th/vim-vsnip-integ'

call plug#end()

set mouse=a
set nowrap
set nonumber
set title
set showcmd
set backspace=indent,eol,start

set clipboard=unnamed

set list
set listchars=eol:↩,tab:<->,trail:⊠,extends:⇢,precedes:⇠,nbsp:…

" Search
set ignorecase
set smartcase
set wrapscan
set hlsearch

" Edit
set autoindent
set showmatch
set smartindent
set cindent

" Tab
set tabstop=4
set shiftwidth=4
set expandtab
set smarttab
set shiftround

" color
syntax on
set background=dark
colorscheme gruvbox

" 全角スペースの表示
highlight ZenkakuSpace cterm=standout,undercurl term=standout,undercurl gui=standout,undercurl
match ZenkakuSpace /　/

" Hack #104: Visual mode で選択したテキストを検索する
" https://vim-jp.org/vim-users-jp/2009/11/25/Hack-104.html
vnoremap <silent> * "vy/\V<C-r>=substitute(escape(@v,'\/'),"\n",'\\n','g')<CR><CR>

" Undo
set undofile
set undodir=$XDG_DATA_HOME/vim/undo     | call mkdir(&undodir,   'p')

" Swap
set swapfile
set directory=$XDG_DATA_HOME/vim/swap   | call mkdir(&directory, 'p')

" Backup
set backup
set backupdir=$XDG_DATA_HOME/vim/backup | call mkdir(&backupdir, 'p')

" netrw
let g:netrw_home = $XDG_DATA_HOME . '/vim'

set updatetime=100 " vim-lsp の :LspHover の表示が自動的に消えないよう短くする
